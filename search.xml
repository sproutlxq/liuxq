<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS经典面试题-四种方式实现两列布局</title>
    <url>/2020/05/13/CSS%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E4%B8%A4%E5%88%97%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>   典型的两列布局就是下图这个样子。<br>   外层父容器是<i>.container</i>，左侧有固定宽度的<i>nav</i>，右侧的<i>section</i>自适应宽度。</p>
<p>   常见的面试题还有在这个基础上增加header、footer。footer固定在页面底部，无论页面怎样滚动，保持固定宽度和位置。<br>   本文用四种方式实现下图的两列布局，顺便可以复习一下CSS Layout的部分知识。</p>
<p>   <img src="https://i.loli.net/2020/06/01/5fVHKr6DO79FIXk.png" alt="two-column.PNG"></p>
<p>   这个例子的html结构和基本的样式如下，我在此基础上添加布局样式实现两列布局。</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    &#x2F;* 基本样式 *&#x2F;</span><br><span class="line">    body &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div, nav, section, header, footer &#123;</span><br><span class="line">        box-sizing: border-box; </span><br><span class="line">        border: solid 1px #000000;</span><br><span class="line">    &#125;</span><br><span class="line">    header &#123;</span><br><span class="line">        background-color: brown;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 80px;</span><br><span class="line">    &#125;</span><br><span class="line">    footer &#123;</span><br><span class="line">        background-color: cornflowerblue;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 120px;</span><br><span class="line">    &#125;</span><br><span class="line">    .container &#123;</span><br><span class="line">        height: 500px;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;   </span><br><span class="line">    nav &#123;</span><br><span class="line">        height: 300px;</span><br><span class="line">    &#125;</span><br><span class="line">    section &#123;</span><br><span class="line">        height: 700px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;* 布局样式 *&#x2F;</span><br><span class="line">    &#x2F;* 添加在这里 *&#x2F;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header&gt;我是固定宽高的header，高度为80px&lt;&#x2F;header&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;nav&gt;这是左边的栏目，固定宽度200px&lt;&#x2F;nav&gt;</span><br><span class="line">        &lt;section&gt;这是右边的栏目，占据屏幕剩下的宽度&lt;&#x2F;section&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;footer&gt;我是固定在页面底部的footer，我的高度是120px&lt;&#x2F;footer&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></code></pre><h4 id="第一种方式：利用absolute-postion实现"><a href="#第一种方式：利用absolute-postion实现" class="headerlink" title="第一种方式：利用absolute postion实现"></a>第一种方式：利用absolute postion实现</h4>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0; </span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">section &#123;</span><br><span class="line">    margin-left: 200px;</span><br><span class="line">&#125;</span><br><span class="line">footer &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   这个实现涉及到了position的各个属性： relative、absolute、fixed，还有一个无处不在的ststic。</p>
<p>   static 是默认值。任意 position: static; 的元素不会被特殊的定位。一个 static 元素表示它不会被“positioned”，一个 position 属性被设置为其他值的元素表示它会被“positioned”。</p>
<p>   relative 表现的和 static 一样，除非你添加了一些额外的属性。在一个相对定位（position属性的值为relative）的元素上设置 top 、 right 、 bottom 和 left 属性会使其<strong>偏离其正常位置</strong>。其他的元素的位置则不会受该元素的影响发生位置改变来弥补它偏离后剩下的空隙。</p>
<p>   一个固定定位（position属性的值为fixed）元素会<strong>相对于视窗来定位</strong>，这意味着即便页面滚动，它还是会停留在相同的位置。和 relative 一样， top 、 right 、 bottom 和 left 属性都可用。<br>   一个固定定位元素不会保留它原本在页面应有的空隙（脱离文档流）。</p>
<p>   absolute 是最棘手的position值。 absolute 与 fixed 的表现类似，但是它不是相对于视窗而是<strong>相对于最近的“positioned”祖先元素</strong>。如果绝对定位（position属性的值为absolute）的元素没有“positioned”祖先元素，那么它是相对于文档的 body 元素，并且它会随着页面滚动而移动。记住一个“positioned”元素是指 position 值不是 static 的元素。</p>
<p>   看明白以上position属性的表现就能理解第一种解决方案。</p>
<h4 id="第二种方式：利用float实现"><a href="#第二种方式：利用float实现" class="headerlink" title="第二种方式：利用float实现"></a>第二种方式：利用float实现</h4>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    height: 500px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;   </span><br><span class="line">nav &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">section &#123;</span><br><span class="line">    margin-left: 200px;</span><br><span class="line">&#125;</span><br><span class="line">footer &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   float 属性定义元素在哪个方向浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。<br>   float设计的初衷并不是用来布局的，其本意仅仅是实现图片文字环绕效果，即图片左浮动，文字环绕图片。</p>
<p>   一个元素设置了float属性，会表现出如下特性：</p>
<ol>
<li>包裹性：一个浮动元素，如果子元素宽度足够小，则浮动元素的宽度就是该子元素的宽度；如果浮动元素的父元素有设置宽度，并且浮动元素的子元素宽度超出了父元素，则浮动元素的宽度最终表现为父元素的宽度。</li>
</ol>
<ol start="2">
<li><p>块状格式化上下文：设定了float的元素，其display的最终值会表现为block或者table(除了inline-table)。<br>因此，设置了float的元素，下面的写法是多余的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.float &#123;</span><br><span class="line">    float: left:</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line">.float &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    vertical-align: middle; &#x2F;* 不起作用 *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>破坏文档流：设置float的元素，会导致父元素高度塌陷。</p>
<p>看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;father&quot;&gt;</span><br><span class="line">   &lt;img src&#x3D;&quot;.&#x2F;card.jpg&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;float&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    文字环绕文字环绕文字环绕文字环绕文字环绕文字环绕文字环绕文字环绕文字环绕文字环绕</span><br><span class="line">&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://image-static.segmentfault.com/301/078/3010780609-5b826252cec40_articlex" alt="float父元素高度塌陷"></p>
<p>可以看到父元素<i>father</i>的高度为0。</p>
<p>这里还有一个隐藏特性，为了让文字浮动上去后不会盖在图片上，盒模型元素不会与浮动元素互相遮盖，因此给文字设置margin的负值也没有用。</p>
</li>
</ol>
<ol start="4">
<li>没有margin合并</li>
</ol>
<p>   其实，就像前面说的，float本来不是用来实现布局的，如果一个页面比较复杂，用float常常会产生很多问题，因此不推荐用这个方法来实现两列布局 or 多列布局。</p>
<h4 id="第三种方式：利用display：inline-block实现"><a href="#第三种方式：利用display：inline-block实现" class="headerlink" title="第三种方式：利用display：inline-block实现"></a>第三种方式：利用display：inline-block实现</h4>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nav &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">section &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line">footer &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   display: inline-block这个属性很简单，改变了盒模型的默认显示方式。这种实现方式要注意的是应该添加vertical-align: top;属性，这样左右两列高度不一致时也能够对齐。</p>
<p>   但是这个方法有一个要求： 右侧的内容必须足够多，能够填充剩余宽度。</p>
<h4 id="第四种方式：利用flex实现"><a href="#第四种方式：利用flex实现" class="headerlink" title="第四种方式：利用flex实现"></a>第四种方式：利用flex实现</h4>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    display: -webkit-flex;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">nav &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">section &#123;</span><br><span class="line">    -webkit-flex: 1;</span><br><span class="line">            flex: 1;</span><br><span class="line">&#125;</span><br><span class="line">footer &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   待填坑</p>
<p>   参考链接： <a href="http://zh.learnlayout.com/" target="_blank" rel="noopener">http://zh.learnlayout.com/</a></p>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>Layout</tag>
      </tags>
  </entry>
  <entry>
    <title>&#39;swiper源码解析和react实现轮播图&#39;</title>
    <url>/2020/06/03/swiper%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%92%8Creact%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>swiper</tag>
        <tag>轮播图</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>《深入理解ES6》读书笔记</title>
    <url>/2020/06/03/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>待填坑</p>
]]></content>
  </entry>
  <entry>
    <title>《TensorFlow学习指南》读书笔记</title>
    <url>/2020/06/03/%E3%80%8ATensorFlow%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>待填坑</p>
]]></content>
  </entry>
  <entry>
    <title>《用Python进行数据分析》读书笔记</title>
    <url>/2020/06/03/%E3%80%8A%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>待填坑</p>
]]></content>
  </entry>
  <entry>
    <title>为什么建站</title>
    <url>/2020/05/01/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BB%BA%E7%AB%99/</url>
    <content><![CDATA[<p>   2019年我幸运的得到了一个天使宝宝，同时也跨入了我的30岁。有阵痛，但也感到了前所未有的圆满和幸福。<br>   在休产假期间，赶上了2020年的疫情，于是“幸运”的能够在家陪伴宝宝七个半月时间。空闲时沉迷B站，整个人都变得年轻了（国企真的催人老 &amp;&amp; 吐槽脸），然后产生了强烈的愿望，想要在30岁这一年做一些以前不会做的事。</p>
<p>   我的兴趣很多：打单机游戏、电影、游泳、桌游、看小说、做家务、旅游、画画… 除了兴趣，也常常对其他没体验过的事情感到好奇。我一直感觉自己的生活非常丰富多彩，我沉迷于自己的世界，变得越来越懒得与别人交流（内心os: 反正你们也不会懂我的乐趣 &amp;&amp; 傲娇脸），习惯与所有人保持着稍稍远一些的距离。</p>
<p>   但是30了，再不改变，也许我就变成了一个固执的老太太，然后就要以现在的面貌一直到老呢。我想试着锻炼下与人交流的能力，也许与人多交流也会产生乐趣呢？那么就从写博客开始吧！</p>
<p>   另一个目的，是希望博客分享的方式，逼迫我把一些知识学得更透彻，事情做到更精细，然后多多总结，并把学过的内容沉淀下来（现在的工作与专业无关，学过的知识用不上，所以遗忘很严重，每年都要重学一遍，真的很浪费时间）。</p>
<p>   这个站的文章可能会很杂，包括学习总结、读书笔记、观影报告、日记等等，所以不想按照分类来组织，搜索的话就依靠Tag。这样我可以在写作灵感乍现的时候没有分类负担的先写下来再说。</p>
<p>   写作频率还是要对自己有些要求的，每周至少要有一篇学习类的文章（但是不能用太简单的凑数），不然可能像以前一样，轰轰烈烈去购买了域名备了案，但是什么也不想写。</p>
]]></content>
      <tags>
        <tag>日记</tag>
        <tag>第一篇</tag>
      </tags>
  </entry>
  <entry>
    <title>&#39;用策略模式设计复杂表单的探索&#39;</title>
    <url>/2020/06/03/%E7%94%A8%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E6%9D%82%E8%A1%A8%E5%8D%95%E7%9A%84%E6%8E%A2%E7%B4%A2/</url>
    <content><![CDATA[<p>待填坑</p>
]]></content>
  </entry>
  <entry>
    <title>Github Pages + hexo Next 搭建个人博客</title>
    <url>/2020/05/07/Github-Page-hexo-Next-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h4 id="一、Github-Pages-和-hexo是什么"><a href="#一、Github-Pages-和-hexo是什么" class="headerlink" title="一、Github Pages 和 hexo是什么"></a>一、Github Pages 和 hexo是什么</h4><p>   Github Pages是github提供的托管个人博客的工具，不过只能存放静态页面。通过修改项目的setting就可以开启Github Pages服务。配置好以后，它会给你一个可以访问的域名，这样你就不用去买服务器和域名以及备案了。</p>
<p>   Hexo 是一个基于 Node.js 的快速、简洁且高效的博客框架，可以方便的生成静态网页托管在github和Heroku上。Hexo 因其界面简洁、美观且对各类人群（不只是程序猿）友好而广受欢迎。<br>   它有以下几个特点：</p>
<p>   超快速度—-Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。<br>   一键部署—-只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。<br>   支持 Markdown—-Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。<br>   丰富的插件—-Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p>
<p>   把二者结合起来搭建个人网站，不需要写一行代码，非常迅速。把hexo生成的内容直接push到Github上即可发布网站，博客管理变得非常方便。</p>
<h4 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h4><p><strong>1. 配置好一个Github Pages仓库</strong></p>
<p>   新建一个Github项目,命名规则为： [<code>Github用户名</code>].github.io</p>
<p>   建好以后开始配置Github Pages，步骤是：</p>
<blockquote>
<p>Github项目 -&gt; Setting -&gt; GitHub Pages -&gt; 选择Source</p>
</blockquote>
<p>   不需要选择主题，如果选择主题则默认用Github提供的jekyll工具搭建网站，而我们使用的是hexo。到这里Github Pages的访问地址已经有了，但是还没有内容，因此不能访问。</p>
<p><strong>2. npm安装hexo</strong></p>
<p>   首先使用npm安装hexo-cli</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>   看到控制台有安装成功的log后，可以开始使用hexo搭建网站了。</p>
<p>   新建一个项目文件夹，比如我的项目文件夹叫sproutlxq，在windows下的命令是：</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir sproutlxq</span><br></pre></td></tr></table></figure>

<p>   cd进入刚才新建的项目文件夹，然后依次运行下面两个命令：</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init   #初始化hexo博客</span><br><span class="line">$ npm install   #安装必要组件</span><br></pre></td></tr></table></figure>

<p>   这时候hexo已经为我们创建了一个hello_world的默认网页。但是在新版hexo中，还需要安装一个叫hexo-server的模块，才能启动本地服务。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>

<p>   安装成功后启动本地服务：</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s   #简写的命令</span><br><span class="line">$ hexo s --debug  #开启debug模式</span><br></pre></td></tr></table></figure>

<p>   当我们看到服务启动成功的提示后，就可以根据提示去访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p>
<p><strong>3. 安装next主题Next</strong></p>
<p>   hexo官方网站上有很多主题，可以选择自己喜欢的主题。按照github上的star数，Next主题是最受欢迎的。我也选择了Next。</p>
<p>   在项目文件夹下面，执行主题安装命令：</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>   这个主题会自动被安装到项目文件夹下的themes文件夹内。</p>
<p>   接下来要启用Next 主题，在站点配置文件中配置。<br>   <code>theme: next</code></p>
<p>   到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p>
<p>   运行 <code>hexo s --debug</code> 命令启动本地服务器，如果看到如下界面，说明安装成功了。</p>
<p>   <img src="http://theme-next.iissnan.com/uploads/five-minutes-setup/validation-default-scheme-mac.png" alt="Next 主题"></p>
<p>   Next主题目前提供了五种Scheme供用户选择，默认是Muse，我觉得Pisces也很漂亮，所以更改下主题配置文件<kbd>_config.yml</kbd></p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure>

<p>   把不启用的scheme先注释掉。刷新页面就可以看到效果了。</p>
<p>   接下来还可以参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">hexo 官方网站</a> ，去配置语言、菜单等内容。</p>
<p>   有兴趣的还可以仔细浏览主题配置文件和站点配置文件，修改自己感兴趣的配置项。</p>
<p><strong>4. 发布到Github</strong></p>
<p>   有两种方式可以把我们上面生成的网站发布到Github上：HTTPS和SSH。HTTPS比较简单，但SSH一劳永逸，我用了SSH的方式，这里偷懒只记录SSH方式。</p>
<p>   首先，要安装hexo-deployer-git组件。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>   看下本地git的配置：<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure></p>
<p>   如果没有配置好就配置一下。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name [your name]</span><br><span class="line">git config --global user.email [your email]</span><br></pre></td></tr></table></figure>
<p>   接下来，我们就可以根据上面配置的用户名与邮箱生成SSH公钥私钥（RSA算法），我们将公钥发给GitHub的SSH管理员时，我们如果拿着私钥去访问GitHub，GitHub SSH管理员就可以进行公钥私钥配对，来完成认证。当然，第一次将公钥给GitHub时，GitHub管理员是需要我们输入密码来认证的。</p>
<p>   确认配置过git用户名与邮箱之后，运行以下命令，生成公钥私钥。连续回车使用默认参数。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;  #邮箱为GitHub邮箱</span><br></pre></td></tr></table></figure>

<p>   根据控制台的提示，找到公钥私钥存放的位置。按照下面的步骤把公钥告诉Github。</p>
<blockquote>
<p>将公钥复制 -&gt; 打开GitHub -&gt; settings -&gt; SSH and GPG keys -&gt; New SSH key -&gt; title随便起，将公钥复制到key框中 -&gt; Add SSH key -&gt; 输入GitHub密码 -&gt; 成功。</p>
</blockquote>
<p>   接下来修改站点配置文档 <kbd>_config.yml</kbd></p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repository: git@github.com:xxx&#x2F;xxx.github.io.git</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure>

<p>   将repository修改为我们Github的ssh地址。SSH地址可以在GitHub -&gt; GitHub page库 -&gt; clone or download -&gt; Use SSH获取.</p>
<p>   修改完成之后，可以运行以下命令来进行部署：<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean            #清除之前静态页面</span><br><span class="line">hexo generate            #生成静态页面</span><br><span class="line">hexo deploy(可缩写为d)  # 部署</span><br></pre></td></tr></table></figure></p>
<p>   至此部署完成，访问github page给的地址，就可以看到自己的个人页面了。<br>   <a href="https://sproutlxq.github.io/">https://sproutlxq.github.io/</a></p>
<p><strong>5. 发布新文章</strong></p>
<p>  新建博文的命令是：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new [title]</span><br></pre></td></tr></table></figure>

<p>  这时候在post文件夹下就生成了一个新的.md文件，里面就可以写自己的新文章了。</p>
<p>  hexo文章里引用本地图片一般需要使用npm安装新的hexo功能插件，比较麻烦，更推荐使用图床服务，比如：<a href="https://sm.ms/" target="_blank" rel="noopener">https://sm.ms/</a></p>
<p><strong>6. 博文备份</strong></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>Github Pages</tag>
      </tags>
  </entry>
</search>
